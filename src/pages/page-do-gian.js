import { AttachFile } from '@mui/icons-material';
import { Box, Button, Card, CardContent, CardHeader, Divider } from '@mui/material';
import Head from 'next/head';
import { useState } from 'react';
import { DashboardLayout } from '../components/dashboard-layout';
import FormBuilder from '../components/form/form-builder';

const HomeDoGi = () => {

  const [textoDoContrato, setTextoDoContrato] = useState("FaÃ§a o upload do arquivo.");
  const [nomePropriedades, setNomePropriedades] = useState([]);

  const handleTextCallBack = (novosDadosContrato) => {

    setTextoDoContrato((textoAtualDoContrato) => {

      Object.keys(novosDadosContrato).map((cadaNomeDaProprierade) => {
        textoAtualDoContrato = textoAtualDoContrato.replace(
          `{{${cadaNomeDaProprierade}}}`, novosDadosContrato[cadaNomeDaProprierade]
        );
      });

      return textoAtualDoContrato;
    });
  }

  const handleUpload = async (e) => {

    if (e == null) {
      setTextoDoContrato(null);
      setNomePropriedades([]);
      return;
    }

    e.preventDefault();
    const reader = new FileReader();
    reader.onload = async (e) => {
      const text = (e.target.result);
      setTextoDoContrato(text);
      handleInputCreation(text);
    };
    reader.readAsText(e.target.files[0]);
  }

  const handleInputCreation = (text) => {

    const regex = /{{(.+?)}}/g;
    const resultados = text.matchAll(regex);
    const nomeDasPropriedades = [];

    for (const resultado of resultados) {
      const nomeDaPropriedade = resultado[1];
      nomeDasPropriedades.push(nomeDaPropriedade);
    }

    console.log(nomeDasPropriedades);

    setNomePropriedades(nomeDasPropriedades);
  }

  return (<>
    <Head>
      <title>Core</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <Box sx={{
      m: 2
    }}
    >
      <Card>
        <CardHeader
          title={'Core'}
        />
        <Divider />
        <CardContent sx={{
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-between',
        }}
        >
          <Box sx={{
            display: 'flex',
            flexDirection: 'column',
            width: '50%',
            borderRight: '1px solid gray',
            p: 2
          }}>
            <div>
              {textoDoContrato}
            </div>
          </Box>

          <Box sx={{
            width: '50%',
            p: 2,
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'center',
            gap: 1
          }}>

            <div>
              {
                nomePropriedades.length > 0 ? <FormBuilder textCallBack={handleTextCallBack} initialValues={nomePropriedades} /> : null
              }
            </div>
            <div>
              <Button
                fullWidth
                variant='outlined'
                component="label"
                tipoDoBotao={'primario'}
                endIcon={<AttachFile />}
              >
                Upload File
                <input
                  type="file"
                  hidden
                  onChange={event => handleUpload(event)}
                />
              </Button>
              <button onClick={e => handleUpload(null)}>
                x
              </button>
            </div>
          </Box>
        </CardContent>
      </Card>
    </Box>
  </>)
}

HomeDoGi.getLayout = (page) => (
  <DashboardLayout>
    {page}
  </DashboardLayout>
);

export default HomeDoGi;